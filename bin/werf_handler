#!/bin/bash

### Remove ARGO_ENV_ prefix
for envVar in ${!ARGOCD_ENV_*}
do
  export ${envVar#ARGOCD_ENV_}=${!envVar}
done

### Get env vars from kubernetes secret
#data=`kubectl get secret cd-deploy-secret -o json | jq -r '.data | to_entries | map(.key + "=" + (.value | @base64d)) | .[]'`
#vault kv get -format json xfix/infra/kubernetes/clusters/k-test | jq -r '.data.data | to_entries | map(.key + "=" + (.value | @sh)) | .[]'

### Get deploy secrets
data=`vault kv get -format json ${PROJECT}/infra/deploy/cd | jq -r '.data.data | to_entries | map(.key + "=" + (.value | @sh)) | .[]'`

### Set env vars from deploy secret
for row in $(echo "${data}"); do
  export $row
done

### Set env vars for werf
REGEX='^https?:\/\/[a-zA-Z0-9.]+(.+)\.git$'
[[ ${ARGOCD_APP_SOURCE_REPO_URL} =~ ${REGEX} ]]
export WERF_REPO=${REGISTRY}/${PROJECT}/cache
export WERF_FINAL_REPO=${REGISTRY}/${PROJECT}/${BASH_REMATCH[1]}

export DOCKER_CONFIG=/tmp/${ARGOCD_APP_NAME}

### Script handler
if [[ $1 == "init" ]] && [[ ${WERF_REPO_DISABLED} != "true" ]] ; then
  rm -f /tmp/${ARGOCD_APP_NAME}/config.json
  werf cr login ${REGISTRY}
elif [[ $1 == "render" ]]; then
  if [[ -z "${AVP_TYPE}" ]]; then
    werf render --set-docker-config-json-value
 else
    werf render --set-docker-config-json-value | argocd-vault-plugin generate -
  fi
fi
