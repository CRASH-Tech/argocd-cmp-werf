#!/bin/bash

set -o pipefail

### Remove ARGO_ENV_ prefix
for envVar in ${!ARGOCD_ENV_*}
do
  export ${envVar#ARGOCD_ENV_}=${!envVar}
done

### Get vault token
JWT=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`
retVal=$?
if [ $retVal -ne 0 ]; then
  >&2 echo "Cannot read jwt token!"; exit 1;
fi

VAULT_TOKEN=`curl -s -k --request POST \
  --data '{"jwt": "'"${JWT}"'", "role": "'"${VAULT_AUTH_DEPLOY_ROLE}"'"}' \
  ${VAULT_ADDR}/v1/auth/${VAULT_AUTH_METHOD}/login | jq -e -r '.auth.client_token' 2>/dev/null`
retVal=$?
if [ $retVal -ne 0 ]; then
  >&2 echo "Cannot get vault token!"; exit 1;
fi

### Get deploy secrets
SECRETS=`curl -s -H "X-Vault-Request: true" -H "X-Vault-Token: ${VAULT_TOKEN}" \
  ${VAULT_ADDR}/v1/${VAULT_TENANT}/data/infra/deploy/${DEPLOY_SECRET}/cd | jq -e -r '.data.data | to_entries | map(.key + "=" + .value) | .[]' 2>/dev/null`
retVal=$?
if [ $retVal -ne 0 ]; then
  >&2 echo "Cannot get vault secrets!"; exit 1;
fi

### Set env vars from deploy secret
for row in $(echo "${SECRETS}"); do
  export $row
done

### Set env vars for werf
REGEX='^(https?|ssh):\/\/([a-zA-Z0-9\.\@\:\-]+)\/(.+).git$'

if [[ $ARGOCD_APP_SOURCE_REPO_URL =~ $REGEX ]]; then
  export WERF_REPO=${REGISTRY}/${PROJECT}/cache
  export WERF_FINAL_REPO=${REGISTRY}/${PROJECT}/${BASH_REMATCH[3]}
  export DOCKER_CONFIG=/tmp/${ARGOCD_APP_NAME}
else
  >&2 echo "Cannot parse git url!"; exit 1;
fi

### Script handler
if [[ $1 == "init" ]] && grep -q "image:" "werf.yaml"; then
  rm -f /tmp/${ARGOCD_APP_NAME}/config.json
  werf cr login ${REGISTRY}
elif [[ $1 == "render" ]]; then
  if [[ "${AVP_ENABLED}" == "true" ]]; then
    export AVP_TYPE=vault
    export AVP_AUTH_TYPE=k8s
    export VAULT_ADDR=${VAULT_ADDR}
    export AVP_K8S_MOUNT_PATH=auth/${VAULT_AUTH_METHOD}
    export AVP_K8S_ROLE=${VAULT_AUTH_ROLE}
    werf render --set-docker-config-json-value | argocd-vault-plugin generate -
 else
    werf render --set-docker-config-json-value
  fi
fi
